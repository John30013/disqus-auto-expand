let _options={...defaultConfig},_timer=null,_observer=null,_observedLinks={};function listenForMessages(){chrome.extension.onMessage.addListener(function(e){"refreshOptions"===e.action?refreshOptions():"logDebug"===e.action&&e.message&&_options.doDebug&&console.debug(`[${e.caller}] ${e.message}`,...e.params)})}function createObserver(){_observer=new IntersectionObserver(function(e){if(_options.checkInterval){let n=!1;if(e.forEach(e=>{const s=e.target;_options.doDebug&&console.debug('Checking intersection of "%s" link %s',s.className,s.dataset.luid),e.isIntersecting&&(n=!0,s.classList.contains("post-media-link")&&"View"===s.innerText&&(_options.hideOpenedMobileMediaLinks&&s.classList.add("hidden"),s.dataset.tid=s.dataset.luid),s.click(),_options.doDebug&&console.debug("--\x3e Clicked %s (now %d observed)",s.dataset.luid,Object.keys(_observedLinks).length,_observedLinks),o(s))}),n){_options.doDebug&&console.debug("--\x3e Checking for old links");const e=Date.now(),n=3e5;Object.keys(_observedLinks).filter(o=>e-o>=n).forEach(e=>o(_observedLinks[e]))}}function o(e){const o=e.dataset.luid;_observer.unobserve(e),delete _observedLinks[o],delete e.dataset.luid,_options.doDebug&&console.debug('--\x3e unobserved "%s" link %s',e.className,o)}},{threshold:1})}function processNewLinks(){if(_timer&&window.clearTimeout(_timer),!_options.checkInterval)return void(_options.doDebug&&console.debug("Stopping the timeout loop."));_options.doDebug&&console.debug("Finding new links to observe.");let e=[];_options.moreReplies&&e.push("div.show-children-wrapper:not(.hidden) > a.show-children:not(.busy):not([data-luid])"),_options.newReplies&&e.push('a.realtime-button.reveal:not([style*="display: none;"]):not([data-luid])'),e.length&&document.querySelectorAll(e.join(",")).forEach(o);_options.longItems&&document.querySelectorAll('div.post-message-container:not([style*="max-height: none;"]) + a.see-more:not(.hidden):not([data-luid]), a.curtain-truncate:not(.hidden):not([data-luid])').forEach(o);function o(e){let o=e.dataset.luid;o||(e.dataset.luid=o=Date.now(),_observer.observe(e),_observedLinks[o]=e,_options.doDebug&&console.debug('--\x3e Observing "%s" link %s (now %d observed)',e.className,o,Object.keys(_observedLinks).length,_observedLinks))}_options.mobileMedia&&document.querySelectorAll("a.post-media-link:not([data-tid]):not([data-luid])").forEach(o),_timer=window.setTimeout(processNewLinks,1e3*_options.checkInterval)}function refreshOptions(){chrome.storage.sync.get(defaultConfig,e=>{const o=+_options.checkInterval;(_options=e).doDebug&&console.debug("Got sync'd options: %o",_options),0===o&&_options.checkInterval!==o&&processNewLinks()})}listenForMessages(),createObserver(),refreshOptions(),_options.doDebug&&console.debug(`content.js is running in iframe ${window.name}.`),processNewLinks();