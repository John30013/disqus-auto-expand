let _config={},_timer=null,_observer=null,_observedLinks={},_activeTextareasInView={},_linkCounter=0,_loadAllInitialized=!1,_warnedAboutLoadAll=!1;function listenForMessages(){chrome.runtime.onMessage.addListener(e=>{"logDebug"===e.action&&e.message&&_config.doDebug&&console.debug(`[${e.caller}] ${e.message}`,...e.data)})}function listenForStorageChanges(){chrome.storage.onChanged.addListener((e,n)=>{if("sync"===n)for(let[n,{oldValue:t,newValue:o}]of Object.entries(e))_config[n]=o,_config.doDebug&&console.debug(`Updated _config.${n} to %o`,o),"isEnabled"===n&&!t&&o&&(_config.doDebug&&console.debug("--\x3e Restarting content processing."),processNewLinks(!0))})}function createObserver(){_observer=new IntersectionObserver((function(e){if(!_config.isEnabled)return;let n=!1;e.sort((e,n)=>"LI"===e.tagName?-1:"LI"===n.tagName?1:0);for(;e.length;){const t=e[0],o=t.target;if("LI"!==o.tagName)break;const i=o.firstElementChild.dataset.tid;t.isIntersecting?(n=!0,o.classList.contains("active")?(_config.doDebug&&console.debug("Tracking active reply/edit LI in view: %o",o),_activeTextareasInView[i]=o):(_config.doDebug&&console.debug("Untracking & unobserving inactive reply/edit LI in view: %o",o),delete _activeTextareasInView[i],unobserveLink(o,!0))):(_config.doDebug&&console.debug("Untracking reply/edit LI not in view: %o",o),delete _activeTextareasInView[i]),e.shift()}if(e.forEach(e=>{if(Object.keys(_activeTextareasInView).length)_config.doDebug&&console.debug("An active textarea is visible; unobserving content link in view: %o",e.target),unobserveLink(e.target);else{const t=e.target,o=t.dataset.luid;_config.doDebug&&console.debug('Checking intersection of "%s" link %s',t.className,o),e.isIntersecting&&(n=!0,_config.doDebug&&console.debug('--\x3e link.classList: %o; link.innerText: "%s"',t.classList,t.innerText),activateLink(t),unobserveLink(t),_config.doDebug&&console.debug("--\x3e Clicked %s (now %d observed)",o,Object.keys(_observedLinks).length,_observedLinks))}}),n){_config.doDebug&&console.debug("--\x3e Checking for old links");const e=Date.now(),n=3e5;Object.keys(_observedLinks).filter(t=>e-t.substring(0,t.indexOf("-"))>=n).forEach(e=>unobserveLink(_observedLinks[e],!0))}}),{threshold:1})}function processNewLinks(e){if(e&&chrome.runtime.sendMessage({action:"setIcon",data:_config.isEnabled}),_timer&&clearTimeout(_timer),!_config.isEnabled&&_loadAllInitialized)return _config.doDebug&&console.debug("Stopping the timeout loop."),void chrome.runtime.sendMessage({action:"setIcon",data:_config.isEnabled});_config.isEnabled&&Object.keys(_activeTextareasInView).forEach(e=>{const n=_activeTextareasInView[e];!1===n.classList.contains("active")&&(_config.doDebug&&console.debug("Untracking & unobserving inactive reply/edit LI: %o",n),delete _activeTextareasInView[e],unobserveLink(n,!0))}),_config.doDebug&&(_config.isEnabled?console.debug("Finding new links to observe."):console.debug('Waiting for content to initialize "Load entire discussion" button.'));const n=findNewLinks(_config);if(n.length&&(_loadAllInitialized||initLoadAllContent(),_config.isEnabled&&n.forEach((function(e){let n=e.dataset.luid;if(n)return;n=tagLink(e),_observer.observe(e),_observedLinks[n]=e,_config.doDebug&&console.debug('--\x3e Observing "%s" link %s (now %d observed)',e.className,n,Object.keys(_observedLinks).length,_observedLinks)}))),_config.isEnabled&&_config.openInNewWindow){const e="a[href*='disq.us/url?'][rel*='noopener']:not([target])";document.querySelectorAll(e).forEach(e=>{e.target="_blank",e.title="[new window] "+e.title,_config.doDebug&&console.debug('Added target="_blank" to external link:',e)})}_timer=setTimeout(processNewLinks,1e3*(_loadAllInitialized?_config.checkInterval:5))}async function getCurrentConfig(){return new Promise((e,n)=>{chrome.storage.sync.get(null,t=>{chrome.runtime.lastError?n(chrome.runtime.lastError.message):e(t)})})}function unobserveLink(e,n){const t=e.dataset.luid;t&&(_observer.unobserve(e),delete _observedLinks[t],delete e.dataset.luid,e.removeAttribute("data-luid"),n&&(e.classList.remove("dax-tagged","dax-clicked"),e.title=e.title.replace(/^\[\w+\]\s/,"")),_config.doDebug&&console.debug('--\x3e unobserved "%s" link %s; removeDaxTags: %s',e.className,t,n,e))}function findNewLinks(e){const n=[];return document.querySelectorAll("li.reply.active, li.edit.active").forEach(e=>{n.push(e)}),e&&!e.moreReplies||document.querySelectorAll("div.show-children-wrapper:not(.hidden) > a.show-children:not(.busy):not([data-luid])").forEach(e=>n.push(e)),e&&!e.newReplies||document.querySelectorAll('a.realtime-button.reveal:not([style*="display: none;"]):not([data-luid])').forEach(e=>n.push(e)),e&&!e.longItems||document.querySelectorAll('div.post-message-container:not([style*="max-height: none;"]) + a.see-more:not(.hidden):not([data-luid]), a.curtain-truncate:not(.hidden):not([data-luid])').forEach(e=>n.push(e)),e&&!e.moreComments||document.querySelectorAll('div.load-more:not([style*="none"]) > a.load-more__button, div.load-more-refresh:not([style*="none"]) > a.load-more-refresh__button').forEach(e=>n.push(e)),e&&!e.newComments||document.querySelectorAll('button.alert--realtime:not([style*="none"])').forEach(e=>n.push(e)),n}function tagLink(e){return luid=`${Date.now()}-${_linkCounter++}`,e.setAttribute("data-luid",luid),e.classList.add("dax-tagged"),/^\[(tagged|clicked)\] /.test(e.title)||(e.title="[tagged] "+e.title),luid}function activateLink(e){e.click(),e.classList.add("dax-clicked"),e.title=e.title.replace("[tagged] ","[clicked] ")}function initLoadAllContent(){const e=document.createElement("button");e.innerText="Load entire discussion",e.id="dax-loadAll",e.addEventListener("click",()=>{loadAllContent(0)}),document.getElementById("posts").prepend(e),_loadAllInitialized=!0}function loadAllContent(e){_config.doDebug&&console.debug("loadAllContent(): entering."),_timer&&clearTimeout(_timer),e=e||0;const n=document.getElementById("dax-loadAll");if(0===e){let e=-1,t=document.querySelector(".comment-count");if(t)e=parseInt(t.innerText,10);else{t=document.getElementById("disqus-threadData");try{e=JSON.parse(t.innerText).cursor.total}catch(e){console.info("Couldn't get comment count from JSON: %s",e)}}if(e>500&&!_warnedAboutLoadAll&&(_warnedAboutLoadAll=!0,n.style.willChange="background-position-x, width",!confirm("Loading this entire discussion will take some time and\n  could consume a lot of memory and data. Your browser \n  might become very slow, or stop responding at all.\n\nDo you want to proceed?")))return void(n.style.willChange="")}const t=findNewLinks();if(_config.doDebug&&console.debug(`--\x3e found ${t.length} new links.`),t.length){n.classList.add("processing"),n.style.setProperty("--anim-delay","1s"),n.style.setProperty("--anim-duration","3s"),n.style.setProperty("--opac-delay","3s"),n.style.setProperty("--opac-duration","1s"),e<5?n.innerText="Please wait while the content loads…":e<10?n.innerText="Still working on it…":e<20?n.innerText="Wow, this is a really long discussion…":e<30&&(n.innerText="Looks like the end is in sight…"),t.forEach(e=>{unobserveLink(e),tagLink(e),activateLink(e)});const o=Math.floor(1e3*(5+5*_config.checkInterval/30));_timer=setTimeout(loadAllContent,o,e+1)}else n.classList.add("complete"),n.innerText="The entire discussion is now loaded.",n.style.willChange="",setTimeout(e=>{e.classList.remove("processing","complete"),e.innerText="Load entire discussion",e.blur(),processNewLinks()},4e3,n)}(async()=>{try{_config=await getCurrentConfig()}catch(e){console.warn("getCurrentConfig failed; using defaultConfig.",e)}_config.doDebug&&console.debug(`content.js is running in iframe ${window.name}.`),listenForMessages(),listenForStorageChanges(),createObserver(),processNewLinks()})();